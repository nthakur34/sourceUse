function VMCInputC = makeVMCInput(VMCOpt, outputFile)
%JOD
%
% Copyright 2010, Joseph O. Deasy, on behalf of the CERR development team.
% 
% This file is part of The Computational Environment for Radiotherapy Research (CERR).
% 
% CERR development has been led by:  Aditya Apte, Divya Khullar, James Alaly, and Joseph O. Deasy.
% 
% CERR has been financially supported by the US National Institutes of Health under multiple grants.
% 
% CERR is distributed under the terms of the Lesser GNU Public License. 
% 
%     This version of CERR is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
% 
% CERR is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
% without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
% See the GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with CERR.  If not, see <http://www.gnu.org/licenses/>.

%The write-out portion.
%First we write to a cell array.  Then we print to a file.
%Note: 's' is a subfunction name for num2str.


% Last modified: JJW 26 June 2006 


%monoEnergy option:
if ~isempty(VMCOpt.startBeamletSource.monoEnergy) && VMCOpt.startBeamletSource.monoEnergy>0
    monoEnergyLine = ['      mono energy = ' s(VMCOpt.startBeamletSource.monoEnergy)                      ];
else
    monoEnergyLine = [];
end    

VMCInputC = {...
['! '  VMCOpt.startScoring.description                                                                    ]   ,...
['                        '                                                                               ]   ,...
[' :start scoring options:'                                                                               ]   ,...
['     start in geometry: ' VMCOpt.startScoring.startInGeometry                                           ]   ,...
['      :start dose options:  '                                                                           ]   ,...
['          score in geometries: ' VMCOpt.startScoring.startDoseOptions.scoreInGeometries                 ]   ,...
['          score dose to water: ' s(VMCOpt.startScoring.startDoseOptions.scoreDoseToWater)                  ]   ,...
['      :stop dose options:     '                                                                         ]   ,...
['      :start output options ' VMCOpt.startScoring.startOutputOptions.name ':'                          ]   ,...
['          dump dose:  ' s(VMCOpt.startScoring.startOutputOptions.dumpDose)                                 ]   ,...
['      :stop output options ' VMCOpt.startScoring.startOutputOptions.name  ':'                          ]   ,...
['  :stop scoring options:      '                                                                         ]   ,...
['                              '                                                                         ]   ,...
['  :start geometry:            '                                                                         ]   ,...
['      :start XYZ geometry:    '                                                                         ]   ,...
['          my name = ' VMCOpt.startGeometry.startXYZGeometry.myName                                      ]   ,...
['          method of input = ' VMCOpt.startGeometry.startXYZGeometry.methodOfInput                       ]   ,...
['          phantom file    = ' VMCOpt.startGeometry.startXYZGeometry.phantomFile                         ]   ,...
['      :stop XYZ geometry:     '                                                                         ]   ,...
['  :stop geometry:             '                                                                         ]   ,...
['                              '                                                                         ]   ,...
['  :start beamlet source:      '                                                                         ]   ,...
['      my name = ' VMCOpt.startBeamletSource.myName                                                      ]   ,...
['      monitor units ' VMCOpt.startBeamletSource.myName ' = ' s(VMCOpt.startBeamletSource.monitorUnitsSource) ]   ,...
monoEnergyLine, ...
['      spectrum = ' VMCOpt.startBeamletSource.spectrum                                                      ]   ,...
['      charge       = ' s(VMCOpt.startBeamletSource.charge)                                                 ]   ,...
['      beamlet edges = ' num2str(VMCOpt.startBeamletSource.beamletEdges, '%8.5f ')                                          ]   ,...
['      virtual point source position = ' num2str(VMCOpt.startBeamletSource.virtualPointSourcePosition, '%8.5f ')            ]   ,...
['  :stop beamlet source:       '                                                                         ]   ,...
['                              '                                                                         ]   ,...
['  :start MC Parameter:        '                                                                         ]   ,...
['      automatic parameter = ' VMCOpt.startMCParameter.automaticParameter                                ]   ,...
['  :stop MC Parameter:         '                                                                         ]   ,...
['                              '                                                                         ]   ,...
['  :start MC Control:          '                                                                         ]   ,...
['      ncase  = ' s(VMCOpt.startMCControl.NCase)                                                            ]   ,...
['      nbatch = ' s(VMCOpt.startMCControl.NBatch)                                                           ]   ,...
['      rng seeds = ' s(VMCOpt.startMCControl.RNGSeeds)                                                      ]   ,...
['  :stop MC Control:           '                                                                         ]   ,...
['                              '                                                                         ]   ,...
['  :start variance reduction:  '                                                                         ]   ,...
['      repeat history   = ' s(VMCOpt.startVarianceReduction.repeatHistory)                                  ]   ,...
['      split photons = ' s(VMCOpt.startVarianceReduction.splitPhotons)                                      ]   ,...
['      photon split factor = ' s(VMCOpt.startVarianceReduction.photonSplitFactor)                           ]   ,...
['  :stop variance reduction: '                                                                           ]   ,...
['                              '                                                                         ]   ,...
['  :start quasi:  '                                                                                      ]   ,...
['      base      = ' s(VMCOpt.startQuasi.base)                                                              ]   ,...
['      dimension = ' s(VMCOpt.startQuasi.dimension)                                                         ]   ,...
['      skip      = ' s(VMCOpt.startQuasi.skip)                                                              ]   ,...
['  :stop quasi:    '                                                                                     ]   };


fid = fopen(outputFile,'wt');
for i = 1 : length(VMCInputC)
  fprintf(fid,'%s\n',VMCInputC{i});
end
fclose(fid);

function strOut = s(strIn)
strOut = num2str(strIn);
return



