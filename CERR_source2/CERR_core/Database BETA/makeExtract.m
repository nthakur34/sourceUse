function extract = makeExtract(planC, template)
%"makeExtract"
%   Return a pared down version of the passed planC, with all fields but
%   those listed in the cell array <template> and their children removed.
%
%   Template may be generated by makeTemplate.
%
%JRA 11/28/03
%
%Usage: extract = makeExtract(planC, template)
%
% Copyright 2010, Joseph O. Deasy, on behalf of the CERR development team.
% 
% This file is part of The Computational Environment for Radiotherapy Research (CERR).
% 
% CERR development has been led by:  Aditya Apte, Divya Khullar, James Alaly, and Joseph O. Deasy.
% 
% CERR has been financially supported by the US National Institutes of Health under multiple grants.
% 
% CERR is distributed under the terms of the Lesser GNU Public License. 
% 
%     This version of CERR is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
% 
% CERR is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
% without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
% See the GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with CERR.  If not, see <http://www.gnu.org/licenses/>.


indexS = planC{end};
cellNames = fields(indexS);
for i=1:length(cellNames)
    cellVals(i) = indexS.(cellNames{i});
end

%Call isWanted on each cell in planC.  Manually generate the index alias.
for i=1:length(cellVals)
    [planC{cellVals(i)}, wanted] = isWanted(planC{cellVals(i)}, ['planC{indexS.' cellNames{i} '}'], template, 0);
end
extract = planC;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [structure, wanted] = isWanted(structure, dataName, wantedFields, parentStatus)
%Recursive function to prune unwanted fields.  A field is wanted if its
%fieldname appears in the list of wantedFields or if any of its subfields
%are wanted. If no fields exist in a struct, or it is length 0, [] is
%returned.
wanted = parentStatus;

%If we are UNwanted, set flag to scrap and return.
if ismember(['~' dataName], wantedFields)
    wanted = 0;
    return;
end

%If we are wanted, set flag to keep.  Proceed down to find unwanted stuff.
if ismember(dataName, wantedFields)
    wanted = 1;
end

%Only structures need be considered: They are the only datatypes with
%meaningful field names.  Others are automatically flagged unwanted.
%All elements in a cell array are iterated over with unwanted elements
%removed.
dataType = class(structure); 
switch dataType
    case 'cell'
        for i=1:length(structure(:))
            [structure{i}, wantChild] = isWanted(structure{i}, dataName, wantedFields, wanted);
            if wantChild 
                wanted = 1;
            else
                structure{i} = [];
            end
        end
    
    case 'struct'      
        for i=1:length(structure(:))
            fieldNames = fields(structure);
            for j=1:length(fieldNames)                           
                childName = [dataName '.' fieldNames{j}];
                [structure(i).(fieldNames{j}), wantChild] = isWanted(structure(i).(fieldNames{j}), childName, wantedFields, wanted);    
                if wantChild 
                    wanted = 1;
                else
                    structure = rmfield(structure, fieldNames{j});
                end
            end
        end      
        if length(structure(:)) == 0 | length(fields(structure)) == 0
            wanted = 0;
            structure = [];
            return;
        end
        
end