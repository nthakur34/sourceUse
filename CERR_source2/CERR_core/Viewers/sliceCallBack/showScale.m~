function showScale(hAxis, i)
%
% Copyright 2010, Joseph O. Deasy, on behalf of the CERR development team.
% 
% This file is part of The Computational Environment for Radiotherapy Research (CERR).
% 
% CERR development has been led by:  Aditya Apte, Divya Khullar, James Alaly, and Joseph O. Deasy.
% 
% CERR has been financially supported by the US National Institutes of Health under multiple grants.
% 
% CERR is distributed under the terms of the Lesser GNU Public License. 
% 
%     This version of CERR is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
% 
% CERR is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
% without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
% See the GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with CERR.  If not, see <http://www.gnu.org/licenses/>.

global stateS
global planC
indexS = planC{end};

% check for comparemode if selected
compareMode = getappdata(hAxis,'compareMode');

pos = get(hAxis, 'position');
wid = pos(3); hgt = pos(4);

[scanSet, doseSet, type, coord] = getAxisInfo(hAxis, 'scanSets', 'doseSets', 'view', 'coord');

scanText = ['S: ' num2str(scanSet)];
doseText = ['D: ' num2str(doseSet)];

if isempty(coord);
    set(stateS.handle.CERRAxisLabel1(i), 'string', '', 'visible', 'on', 'erasemode', 'none', 'color', [0 0 0], 'hittest', 'off');
    set(stateS.handle.CERRAxisLabel2(i), 'string', '', 'visible', 'on', 'erasemode', 'none', 'color', [0 0 0], 'hittest', 'off');
    return;
end

try
    [xV, yV, zV] = getScanXYZVals(planC{indexS.scan}(scanSet(1)));
catch
    %warning('No Scan Selected')
    xV = []; yV = [];  zV = [];
    return
end

if stateS.currentAxis == i;
    color = [0 1 0];
else
    color = [1 1 1];
end
try
    transM = getTransM('scan', scanSet(1), planC);
catch
    transM = [];
end
if ~isempty(transM)| isequal(transM,eye(4))
    [nCoordX nCoordY nCoordZ] = applyTransM(inv(transM),coord,coord,coord);

else
    nCoordX = coord;
    nCoordY = coord;
    nCoordZ = coord;
end


switch type
    case 'transverse'
        view        = 'Tra: '; dim1 = 'z: '; dim2 = '\Deltax:'; dim3 = '\Deltay:';
        if isempty(zV)
            numSlices = []; zVal = [];
        else
            sliceNum    = findnearest(zV, nCoordZ);
            numSlices   = num2str(size(getScanArray(planC{indexS.scan}(scanSet(1))), 3));
            xLim        = get(hAxis, 'xLim');
            %deltaX      = num2str(xLim(2) - xLim(1), '%0.4g');
            yLim        = get(hAxis, 'yLim');
            %deltaY      = num2str(yLim(2) - yLim(1), '%0.4g');
            zVal        = num2str(coord, '%15.2f');
            stateS.transverse.ZCoord = str2num(zVal);
            %Show 5cm bar to display zoom-level
            len = 5; %cm
            dx = xLim(2)-xLim(1);
            xStart = xLim(1) + dx * 0.05;
            xEnd = xStart + len;
            dy = yLim(2)-yLim(1);
            yStart = yLim(1) + dy * 0.05;
            yEnd = yStart + len;
            %Delete previous handles
            hScale = findobj(hAxis,'tag','scale');
            delete(hScale)
            line([xStart xEnd], [yStart yStart], [2 2], 'parent', hAxis, 'color', 'y', 'tag', 'scale', 'hittest', 'off');
            line([xStart xStart], [yStart yEnd], [2 2], 'parent', hAxis, 'color', 'y', 'tag', 'scale', 'hittest', 'off');
            xAll = linspace(xStart,xEnd,6);
            yAll = linspace(yStart,yEnd,6);
            if wid/dx < 6 || hgt/dy < 6
                line([xAll(6) xAll(6)], [yStart-dy*0.005 yStart+dy*0.005], [2 2], 'parent', hAxis, 'color', 'y', 'tag', 'scale', 'hittest', 'off');
                line([xStart-dx*0.005 xStart+dx*0.005], [yAll(6) yAll(6)], [2 2], 'parent', hAxis, 'color', 'y', 'tag', 'scale', 'hittest', 'off');
                text('parent', hAxis, 'string', '5', 'position', [xAll(6) yStart-dy*0.02 0], 'color', 'y', 'units', 'data', 'visible', 'on','fontSize',8, 'tag', 'scale');
                text('parent', hAxis, 'string', '5', 'position', [xStart-dx*0.02 yAll(6) 0], 'color', 'y', 'units', 'data', 'visible', 'on','fontSize',8, 'tag', 'scale');
            else
                for iS = 2:length(xAll)
                    line([xAll(iS) xAll(iS)], [yStart-dy*0.005 yStart+dy*0.005], [2 2], 'parent', hAxis, 'color', 'y', 'tag', 'scale', 'hittest', 'off');
                    line([xStart-dx*0.005 xStart+dx*0.005], [yAll(iS) yAll(iS)], [2 2], 'parent', hAxis, 'color', 'y', 'tag', 'scale', 'hittest', 'off');
                    text('parent', hAxis, 'string', num2str(iS-1), 'position', [xAll(iS) yStart-dy*0.02 0], 'color', 'y', 'units', 'data', 'visible', 'on','fontSize',8, 'tag', 'scale');
                    text('parent', hAxis, 'string', num2str(iS-1), 'position', [xStart-dx*0.02 yAll(iS) 0], 'color', 'y', 'units', 'data', 'visible', 'on','fontSize',8, 'tag', 'scale');
                end
            end
            text('parent', hAxis, 'string', 'cm', 'position', [xStart-dx*0.02 yStart-dy*0.02 0], 'color', 'y', 'units', 'data', 'visible', 'on','fontSize',8, 'tag', 'scale','rotation',0);
        end

    case 'sagittal'
        view        = 'Sag: ';  dim1 = 'x: '; dim2 = '\Deltay:'; dim3 = '\Deltaz:';
        if isempty(xV)
            numSlices = []; zVal = [];
        else
            sliceNum    = findnearest(xV, nCoordX);
            numSlices   = num2str(size(getScanArray(planC{indexS.scan}(scanSet(1))), 1));
            xLim        = get(hAxis, 'xLim');
            %deltaX      = num2str(xLim(2) - xLim(1), '%0.4g');
            yLim        = get(hAxis, 'yLim');
            %deltaY      = num2str(yLim(2) - yLim(1), '%0.4g');
            zVal        = num2str(coord, '%15.2f');
            stateS.sagittal.ZCoord = str2num(zVal);
            %Show 5cm bar to display zoom-level
            len = 5; %cm
            dx = xLim(2)-xLim(1);
            xStart = xLim(2) - dx * 0.05;
            xEnd = xStart - len;
            dy = yLim(2)-yLim(1);
            yStart = yLim(2) - dy * 0.05;
            yEnd = yStart - len;
            %Delete previous handles
            hScale = findobj(hAxis,'tag','scale');
            delete(hScale)
            line([xStart xEnd], [yStart yStart], [2 2], 'parent', hAxis, 'color', 'y', 'tag', 'scale', 'hittest', 'off');
            line([xStart xStart], [yStart yEnd], [2 2], 'parent', hAxis, 'color', 'y', 'tag', 'scale', 'hittest', 'off');         
            xAll = linspace(xStart,xEnd,6);
            yAll = linspace(yStart,yEnd,6);
            if wid/dx < 6 || hgt/dy < 6
                line([xAll(6) xAll(6)], [yStart-dy*0.005 yStart+dy*0.005], [2 2], 'parent', hAxis, 'color', 'y', 'tag', 'scale', 'hittest', 'off');
                line([xStart-dx*0.005 xStart+dx*0.005], [yAll(6) yAll(6)], [2 2], 'parent', hAxis, 'color', 'y', 'tag', 'scale', 'hittest', 'off');
                text('parent', hAxis, 'string', '5', 'position', [xAll(6) yStart+dy*0.02 0], 'color', 'y', 'units', 'data', 'visible', 'on','fontSize',8, 'tag', 'scale');
                text('parent', hAxis, 'string', '5', 'position', [xStart+dx*0.02 yAll(6) 0], 'color', 'y', 'units', 'data', 'visible', 'on','fontSize',8, 'tag', 'scale');
            else
                for iS = 2:length(xAll)
                    line([xAll(iS) xAll(iS)], [yStart-dy*0.005 yStart+dy*0.005], [2 2], 'parent', hAxis, 'color', 'y', 'tag', 'scale', 'hittest', 'off');
                    line([xStart-dx*0.005 xStart+dx*0.005], [yAll(iS) yAll(iS)], [2 2], 'parent', hAxis, 'color', 'y', 'tag', 'scale', 'hittest', 'off');
                    text('parent', hAxis, 'string', num2str(iS-1), 'position', [xAll(iS) yStart+dy*0.02 0], 'color', 'y', 'units', 'data', 'visible', 'on','fontSize',8, 'tag', 'scale');
                    text('parent', hAxis, 'string', num2str(iS-1), 'position', [xStart+dx*0.02 yAll(iS) 0], 'color', 'y', 'units', 'data', 'visible', 'on','fontSize',8, 'tag', 'scale');
                end
            end
            text('parent', hAxis, 'string', 'cm', 'position', [xStart+dx*0.02 yStart+dy*0.02 0], 'color', 'y', 'units', 'data', 'visible', 'on','fontSize',8, 'tag', 'scale','rotation',0);            
        end

    case 'coronal'
        view        = 'Cor: ';  dim1 = 'y: '; dim2 = '\Deltax:'; dim3 = '\Deltaz:';
        if isempty(yV)
            numSlices = []; zVal = [];
        else
            sliceNum    = findnearest(yV, nCoordY);
            numSlices   = num2str(size(getScanArray(planC{indexS.scan}(scanSet(1))), 2));
            xLim        = get(hAxis, 'xLim');
            %deltaX      = num2str(xLim(2) - xLim(1), '%0.4g');
            yLim        = get(hAxis, 'yLim');
            %deltaY      = num2str(yLim(2) - yLim(1), '%0.4g');
            zVal        = num2str(coord, '%15.2f');
            stateS.coronal.ZCoord = str2num(zVal);
            %Show 5cm bar to display zoom-level
            len = 5; %cm
            dx = xLim(2)-xLim(1);
            xStart = xLim(1) + dx * 0.05;
            xEnd = xStart + len;
            dy = yLim(2)-yLim(1);
            yStart = yLim(2) - dy * 0.05;
            yEnd = yStart - len;
            %Delete previous handles
            hScale = findobj(hAxis,'tag','scale');
            delete(hScale)
            line([xStart xEnd], [yStart yStart], [2 2], 'parent', hAxis, 'color', 'y', 'tag', 'scale', 'hittest', 'off');
            line([xStart xStart], [yStart yEnd], [2 2], 'parent', hAxis, 'color', 'y', 'tag', 'scale', 'hittest', 'off');         
            xAll = linspace(xStart,xEnd,6);
            yAll = linspace(yStart,yEnd,6);
            if wid/dx < 6 || hgt/dy < 6
                line([xAll(6) xAll(6)], [yStart-dy*0.005 yStart+dy*0.005], [2 2], 'parent', hAxis, 'color', 'y', 'tag', 'scale', 'hittest', 'off');
                line([xStart-dx*0.005 xStart+dx*0.005], [yAll(6) yAll(6)], [2 2], 'parent', hAxis, 'color', 'y', 'tag', 'scale', 'hittest', 'off');
                text('parent', hAxis, 'string', '5', 'position', [xAll(6) yStart+dy*0.02 0], 'color', 'y', 'units', 'data', 'visible', 'on','fontSize',8, 'tag', 'scale');
                text('parent', hAxis, 'string', '5', 'position', [xStart-dx*0.02 yAll(6) 0], 'color', 'y', 'units', 'data', 'visible', 'on','fontSize',8, 'tag', 'scale');
            else
                for iS = 2:length(xAll)
                    line([xAll(iS) xAll(iS)], [yStart-dy*0.005 yStart+dy*0.005], [2 2], 'parent', hAxis, 'color', 'y', 'tag', 'scale', 'hittest', 'off');
                    line([xStart-dx*0.005 xStart+dx*0.005], [yAll(iS) yAll(iS)], [2 2], 'parent', hAxis, 'color', 'y', 'tag', 'scale', 'hittest', 'off');
                    text('parent', hAxis, 'string', num2str(iS-1), 'position', [xAll(iS) yStart+dy*0.02 0], 'color', 'y', 'units', 'data', 'visible', 'on','fontSize',8, 'tag', 'scale');
                    text('parent', hAxis, 'string', num2str(iS-1), 'position', [xStart-dx*0.02 yAll(iS) 0], 'color', 'y', 'units', 'data', 'visible', 'on','fontSize',8, 'tag', 'scale');
                end
            end
            text('parent', hAxis, 'string', 'cm', 'position', [xStart-dx*0.02 yStart+dy*0.02 0], 'color', 'y', 'units', 'data', 'visible', 'on','fontSize',8, 'tag', 'scale','rotation',0);            
        end

    case 'legend'
        set(stateS.handle.CERRAxisLabel1(i), 'string', 'Legend', 'visible', 'on', 'erasemode', 'none', 'color', color, 'hittest', 'off');
        return;
    otherwise
        return;
end

% APA commented for werRT - begin
% if wid < 100 | hgt < 100
%     set(stateS.handle.CERRAxisLabel1(i), 'string', [view '        ' compareMode], 'visible', 'on', 'erasemode', 'none', 'color', color, 'hittest', 'off');
%     set(stateS.handle.CERRAxisLabel2(i),'string','');
% else
%     view = [view num2str(sliceNum) '/' numSlices '          ' compareMode];
%     %         set(stateS.handle.CERRAxisLabel(i), 'string', {[view num2str(sliceNum) '/' numSlices], [dim1 zVal 'cm'], [dim2 deltaX 'cm'], [dim3 deltaY 'cm']}, 'visible', 'on', 'erasemode', 'none', 'color', color, 'hittest', 'off');
%     set(stateS.handle.CERRAxisLabel1(i), 'string', {view, [dim1 zVal 'cm']}, 'visible', 'on', 'erasemode', 'none', 'color', color, 'hittest', 'off');
%     
%     set(stateS.handle.CERRAxisLabel2(i), 'string', {scanText, doseText}, 'visible', 'on', 'erasemode', 'none', 'color', color, 'hittest', 'off');
% end
% 
% kids = get(hAxis, 'children');
% index1 = find(kids == stateS.handle.CERRAxisLabel1(i));
% kids(index1) = [];
% index2 = find(kids == stateS.handle.CERRAxisLabel2(i));
% kids(index2) = [];
% index3 = ismember(kids, findobj(hAxis,'tag', 'scale'));
% kids(index3) = [];
% set(hAxis, 'children', [findobj(hAxis,'tag', 'scale');stateS.handle.CERRAxisLabel1(i);stateS.handle.CERRAxisLabel2(i);kids]);
% APA commented for werRT ends
