function outData = setRemoteVariable(inData, storageType, remotePath, filename)
%"setRemoteVariable"
%   Turns local data into remote data.  Only inData is required.
%   storageType specifies if the data is to be stored in a plan's zip file,
%   "Zip", in a specific file on disk, "Local", or on the network,
%   "Network".  "Zip" is the default.
%
%   If "Zip" is specified, the remotePath and filename are generated by
%   CERR, and stored in a temporary directory until the plan is saved to
%   disk using CERR save functions.
%
%   If "Local" or "Network" is specified, a remotePath and filename must be
%   passed, as they determine where the file will be permenantly stored.
%
% JRA 10/14/04
%
%Usage: outData = setRemoteVariable(inData, storageType, remotePath, filename)
%
% Copyright 2010, Joseph O. Deasy, on behalf of the CERR development team.
% 
% This file is part of The Computational Environment for Radiotherapy Research (CERR).
% 
% CERR development has been led by:  Aditya Apte, Divya Khullar, James Alaly, and Joseph O. Deasy.
% 
% CERR has been financially supported by the US National Institutes of Health under multiple grants.
% 
% CERR is distributed under the terms of the Lesser GNU Public License. 
% 
%     This version of CERR is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
% 
% CERR is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
% without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
% See the GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with CERR.  If not, see <http://www.gnu.org/licenses/>.

global planC stateS
indexS = planC{end};

CERRRemoteVariable = inData;

outData.info         = 'Remotely stored data.  Use getRemoteVariable to access.';

switch upper(storageType)
    case 'ZIP'
        outData.storageType  = 'Zip';
        
        fullTemp = tempname;
        [tempdir, fileprefix, ext] = fileparts(fullTemp);
        filename = [fileprefix '.mat'];    

        outData.remotePath = filename;
        outData.data         = [];
        outData.isLoaded     = 0;

        %Save in ML6 style.
        saveOpt = getSaveInfo;
        if ~isempty(saveOpt);
            save(fullTemp, 'CERRRemoteVariable', saveOpt);
        else
            save(fullTemp, 'CERRRemoteVariable');
        end       
        
        
    case 'LOCAL'
        outData.storageType  = 'Local';
        outData.remotePath = remotePath;
        outData.filename = filename;
        outData.data         = [];
        outData.isLoaded     = 0;
        
        if ~exist(remotePath)
            mkdir(remotePath)
        end
        %Save in ML6 style.
        saveOpt = getSaveInfo;
        if ~isempty(saveOpt);
            save(fullfile(remotePath,filename), 'CERRRemoteVariable', saveOpt);
        else
            save(fullfile(remotePath,filename), 'CERRRemoteVariable');
        end
        stateS.reqdRemoteFiles{end+1} = fullfile(remotePath,filename);
        
    
    case 'NETWORK'
        error('Local and Network storage not implemented yet.');
end